/// --------------------------------------------------------------------------------
/// Dart 中与Java 中不同的是：
/// > 1. 函数，变量，代码可以独立在类的外面
/// > 2. 方法，变脸，类等的默认访问控制都是开放的, 并没有相关的修饰符关键字来控制
/// > 3. 使用两个空格作为缩进
/// --------------------------------------------------------------------------------
///
/// Dart 中变量的使用：
/// > 1. var 关键字声明变量
/// > 2. final 关键字声明常量

// 程序主入口，
void main(List<String> args) {
  // new 关键字是可选的 (Dart2中是可选的)
  var bike = Bicycle(2, 3);
  // =>  instance of Bicycle
  print(bike);
}

class Bicycle {
  // 定义变量
  // -------------------------------------------------------------------------
  // dart 中会默认为所有公开的变量提供存取方法
  // 只有当自己需要控制变量的可读，可写，或者需要在某些情况下需要对变量进行
  // 特殊的操作(计算, 更新) 否则都不需要重新定义存取方法
  // -------------------------------------------------------------------------

  int cadence;

  // 可以在变量前添加下划线，表示变量是私有的,
  // 未初始化的变量，即使是数据类型的，也是null
  int _speed = 0;

  // 提供外部访问的方法
  int get speed => _speed;

  int gear;

  // 程序中允许方法没有方法体,需要添加`;`
  Bicycle(this.cadence, this.gear);

  /*
  Bicycle(int cadence, int speed, int gear) {
    this.cadence = cadence;
    this.speed = speed;
    this.gear = gear;
  }
  */

  /*
  --------------------------------------------------------------------------------
  @ovverride  表示是对父类的方法进行覆写
  `=>` 当方法只有一行的时候，可以使用这个符号进行简化
  `${speed}` 表示调用变量的值, 可以达到模板字符串的效果, 如果是单个的标识符，可以省略括号
  */
  @override
  String toString() => 'Bicycle: $_speed mph';

  // 定义方法
  // 减速
  void applyBrake(int decrement) {
    _speed -= decrement;
  }

  // 加速
  void speedUp(int increment) {
    _speed += increment;
  }
}
